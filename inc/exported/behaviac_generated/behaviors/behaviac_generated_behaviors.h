// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_GENERATED_BEHAVIORS_H_
#define _BEHAVIAC_GENERATED_BEHAVIORS_H_

#include "../types/behaviac_types.h"

namespace behaviac
{
	// Source file: Behavior

	class Action_bt_Behavior_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node5, Action);
		Action_bt_Behavior_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_method);
			((blackboard*)pAgent_method)->LogicInit();
			return BT_SUCCESS;
		}
	};

	class DecoratorLoop_bt_Behavior_node46 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_Behavior_node46, DecoratorLoop);
		DecoratorLoop_bt_Behavior_node46()
		{
			m_bDecorateWhenChildEnds = true;
			m_bDoneWithinFrame = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class Parallel_bt_Behavior_node65 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_Behavior_node65, Parallel);
		Parallel_bt_Behavior_node65()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_Behavior_node50 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node50, Action);
		Action_bt_Behavior_node50()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_method);
			((Coverage*)pAgent_method)->_Execute_Method_<METHOD_TYPE_Coverage_SetGroup, void >();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node70 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node70, Action);
		Action_bt_Behavior_node70()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_method);
			((Coverage*)pAgent_method)->DevideArea();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node71 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node71, Action);
		Action_bt_Behavior_node71()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_method);
			((Coverage*)pAgent_method)->FindCoveragePath();
			return BT_SUCCESS;
		}
	};

	class DecoratorLoop_bt_Behavior_node1 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_Behavior_node1, DecoratorLoop);
		DecoratorLoop_bt_Behavior_node1()
		{
			m_bDecorateWhenChildEnds = true;
			m_bDoneWithinFrame = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node15 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node15, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node15()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node16 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node16, Condition);
		Condition_bt_Behavior_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((blackboard*)pAgent_opl)->ManualCommand;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class ReferencedBehavior_bt_Behavior_node63 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_Behavior_node63, ReferencedBehavior);
		ReferencedBehavior_bt_Behavior_node63()
		{
			const char* szTreePath = this->GetReferencedTree(0);
			if (szTreePath) {
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(szTreePath);
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			}
		}
	protected:
		virtual const char* GetReferencedTree(const Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return (char*)("Interact");
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node27 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node27, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node27()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node20 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node20, Condition);
		Condition_bt_Behavior_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((blackboard*)pAgent_opl)->EnableOrDisable;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node78 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node78, Action);
		Action_bt_Behavior_node78()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_method);
			((blackboard*)pAgent_method)->StateUpdate();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Behavior_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node4, Assignment);
		Assignment_bt_Behavior_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Assignment_bt_Behavior_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node12, Assignment);
		Assignment_bt_Behavior_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = false;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			((blackboard*)pAgent_opl)->EnableOrDisable = opr;
			return result;
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node22 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node22, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node22()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node9 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node9, Condition);
		Condition_bt_Behavior_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Process*)pAgent_opl)->Replan;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node69 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node69, Action);
		Action_bt_Behavior_node69()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_method);
			((Coverage*)pAgent_method)->_Execute_Method_<METHOD_TYPE_Coverage_SetGroup, void >();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node10 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node10, Action);
		Action_bt_Behavior_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_method);
			((Coverage*)pAgent_method)->DevideArea();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node14 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node14, Action);
		Action_bt_Behavior_node14()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_method);
			((Coverage*)pAgent_method)->FindCoveragePath();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Behavior_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node3, Assignment);
		Assignment_bt_Behavior_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = false;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node49 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node49, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node49()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node40 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node40, Condition);
		Condition_bt_Behavior_node40()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((blackboard*)pAgent_opl)->NewTarget;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node25 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node25, Action);
		Action_bt_Behavior_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_method);
			((Recognize*)pAgent_method)->ApproachAndRecognize();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_Behavior_node42 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node42, Condition);
		Condition_bt_Behavior_node42()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			int& opl = ((blackboard*)pAgent_opl)->TargetsFound;
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opr);
			int& opr = blackboard::TotalTargets;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Assignment_bt_Behavior_node43 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node43, Assignment);
		Assignment_bt_Behavior_node43()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Revisit*)pAgent_opl)->IgnoreBlindSpot = opr;
			return result;
		}
	};

	class Assignment_bt_Behavior_node64 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node64, Assignment);
		Assignment_bt_Behavior_node64()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Assignment_bt_Behavior_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node7, Assignment);
		Assignment_bt_Behavior_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = false;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Revisit*)pAgent_opl)->IgnoreBlindSpot = opr;
			return result;
		}
	};

	class Assignment_bt_Behavior_node44 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node44, Assignment);
		Assignment_bt_Behavior_node44()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = false;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			((blackboard*)pAgent_opl)->NewTarget = opr;
			return result;
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node72 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node72, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node72()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node74 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node74, Condition);
		Condition_bt_Behavior_node74()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Process*)pAgent_opl)->Finnished;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node45 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node45, Action);
		Action_bt_Behavior_node45()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_method);
			((blackboard*)pAgent_method)->StateUpdate();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Behavior_node73 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node73, Assignment);
		Assignment_bt_Behavior_node73()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Condition_bt_Behavior_node75 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node75, Condition);
		Condition_bt_Behavior_node75()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Process*)pAgent_opl)->Finnished;
			bool opr = false;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_Behavior_node47 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node47, Condition);
		Condition_bt_Behavior_node47()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_ = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_);
			bool opl = ((Process*)pAgent_)->_Execute_Method_<METHOD_TYPE_Process_VehicleVectorEmpty, bool >();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node26 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node26, Action);
		Action_bt_Behavior_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_method);
			((Revisit*)pAgent_method)->AskForBlindSpot();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node76 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node76, Action);
		Action_bt_Behavior_node76()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_method);
			((Revisit*)pAgent_method)->FindRevisitOrder();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node77 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node77, Action);
		Action_bt_Behavior_node77()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_method);
			((Revisit*)pAgent_method)->FindRevisitPath();
			return BT_SUCCESS;
		}
	};

	class DecoratorLoopUntil_bt_Behavior_node28 : public DecoratorLoopUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoopUntil_bt_Behavior_node28, DecoratorLoopUntil);
		DecoratorLoopUntil_bt_Behavior_node28()
		{
			m_bDecorateWhenChildEnds = true;
			m_until = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node21 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node21, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node21()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node51 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node51, Condition);
		Condition_bt_Behavior_node51()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((blackboard*)pAgent_opl)->ManualCommand;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class ReferencedBehavior_bt_Behavior_node56 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_Behavior_node56, ReferencedBehavior);
		ReferencedBehavior_bt_Behavior_node56()
		{
			const char* szTreePath = this->GetReferencedTree(0);
			if (szTreePath) {
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(szTreePath);
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			}
		}
	protected:
		virtual const char* GetReferencedTree(const Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return (char*)("Interact");
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node29 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node29, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node29()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node55 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node55, Condition);
		Condition_bt_Behavior_node55()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((blackboard*)pAgent_opl)->NewTarget;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node48 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node48, Action);
		Action_bt_Behavior_node48()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_method);
			((Recognize*)pAgent_method)->ApproachAndRecognize();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_Behavior_node59 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node59, Condition);
		Condition_bt_Behavior_node59()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			int& opl = ((blackboard*)pAgent_opl)->TargetsFound;
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opr);
			int& opr = blackboard::TotalTargets;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Assignment_bt_Behavior_node60 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node60, Assignment);
		Assignment_bt_Behavior_node60()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Revisit*)pAgent_opl)->IgnoreBlindSpot = opr;
			return result;
		}
	};

	class Assignment_bt_Behavior_node68 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node68, Assignment);
		Assignment_bt_Behavior_node68()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Assignment_bt_Behavior_node61 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node61, Assignment);
		Assignment_bt_Behavior_node61()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = false;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Revisit*)pAgent_opl)->IgnoreBlindSpot = opr;
			return result;
		}
	};

	class Assignment_bt_Behavior_node62 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node62, Assignment);
		Assignment_bt_Behavior_node62()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = false;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			((blackboard*)pAgent_opl)->NewTarget = opr;
			return result;
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node52 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node52, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node52()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node2 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node2, Condition);
		Condition_bt_Behavior_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((blackboard*)pAgent_opl)->EnableOrDisable;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node79 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node79, Action);
		Action_bt_Behavior_node79()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_method);
			((blackboard*)pAgent_method)->StateUpdate();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Behavior_node33 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node33, Assignment);
		Assignment_bt_Behavior_node33()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Condition_bt_Behavior_node34 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node34, Condition);
		Condition_bt_Behavior_node34()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((blackboard*)pAgent_opl)->EnableOrDisable;
			bool opr = false;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class DecoratorAlwaysSuccess_bt_Behavior_node53 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_Behavior_node53, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_Behavior_node53()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
	};

	class Condition_bt_Behavior_node36 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node36, Condition);
		Condition_bt_Behavior_node36()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Process*)pAgent_opl)->Replan;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Behavior_node23 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node23, Action);
		Action_bt_Behavior_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_method);
			((Revisit*)pAgent_method)->AskForBlindSpot();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node37 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node37, Action);
		Action_bt_Behavior_node37()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_method);
			((Revisit*)pAgent_method)->FindRevisitOrder();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Behavior_node38 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Behavior_node38, Action);
		Action_bt_Behavior_node38()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_method);
			((Revisit*)pAgent_method)->FindRevisitPath();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Behavior_node13 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Behavior_node13, Assignment);
		Assignment_bt_Behavior_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = false;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Condition_bt_Behavior_node11 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Behavior_node11, Condition);
		Condition_bt_Behavior_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_ = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_);
			bool opl = ((Process*)pAgent_)->_Execute_Method_<METHOD_TYPE_Process_VehicleVectorEmpty, bool >();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class bt_Behavior
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("Behavior");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("behaviac::Agent");
#endif
			// children
			{
				Sequence* node67 = BEHAVIAC_NEW Sequence;
				node67->SetClassNameString("Sequence");
				node67->SetId(67);
#if !BEHAVIAC_RELEASE
				node67->SetAgentType("behaviac::Agent");
#endif
				pBT->AddChild(node67);
				{
					Action_bt_Behavior_node5* node5 = BEHAVIAC_NEW Action_bt_Behavior_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("behaviac::Agent");
#endif
					node67->AddChild(node5);
					node67->SetHasEvents(node67->HasEvents() | node5->HasEvents());
				}
				{
					DecoratorLoop_bt_Behavior_node46* node46 = BEHAVIAC_NEW DecoratorLoop_bt_Behavior_node46;
					node46->SetClassNameString("DecoratorLoop");
					node46->SetId(46);
#if !BEHAVIAC_RELEASE
					node46->SetAgentType("behaviac::Agent");
#endif
					node67->AddChild(node46);
					{
						Parallel_bt_Behavior_node65* node65 = BEHAVIAC_NEW Parallel_bt_Behavior_node65;
						node65->SetClassNameString("Parallel");
						node65->SetId(65);
#if !BEHAVIAC_RELEASE
						node65->SetAgentType("behaviac::Agent");
#endif
						node46->AddChild(node65);
						{
							Sequence* node18 = BEHAVIAC_NEW Sequence;
							node18->SetClassNameString("Sequence");
							node18->SetId(18);
#if !BEHAVIAC_RELEASE
							node18->SetAgentType("behaviac::Agent");
#endif
							node65->AddChild(node18);
							{
								Action_bt_Behavior_node50* node50 = BEHAVIAC_NEW Action_bt_Behavior_node50;
								node50->SetClassNameString("Action");
								node50->SetId(50);
#if !BEHAVIAC_RELEASE
								node50->SetAgentType("behaviac::Agent");
#endif
								node18->AddChild(node50);
								node18->SetHasEvents(node18->HasEvents() | node50->HasEvents());
							}
							{
								Action_bt_Behavior_node70* node70 = BEHAVIAC_NEW Action_bt_Behavior_node70;
								node70->SetClassNameString("Action");
								node70->SetId(70);
#if !BEHAVIAC_RELEASE
								node70->SetAgentType("behaviac::Agent");
#endif
								node18->AddChild(node70);
								node18->SetHasEvents(node18->HasEvents() | node70->HasEvents());
							}
							{
								Action_bt_Behavior_node71* node71 = BEHAVIAC_NEW Action_bt_Behavior_node71;
								node71->SetClassNameString("Action");
								node71->SetId(71);
#if !BEHAVIAC_RELEASE
								node71->SetAgentType("behaviac::Agent");
#endif
								node18->AddChild(node71);
								node18->SetHasEvents(node18->HasEvents() | node71->HasEvents());
							}
							{
								DecoratorLoop_bt_Behavior_node1* node1 = BEHAVIAC_NEW DecoratorLoop_bt_Behavior_node1;
								node1->SetClassNameString("DecoratorLoop");
								node1->SetId(1);
#if !BEHAVIAC_RELEASE
								node1->SetAgentType("behaviac::Agent");
#endif
								node18->AddChild(node1);
								{
									Sequence* node66 = BEHAVIAC_NEW Sequence;
									node66->SetClassNameString("Sequence");
									node66->SetId(66);
#if !BEHAVIAC_RELEASE
									node66->SetAgentType("behaviac::Agent");
#endif
									node1->AddChild(node66);
									{
										DecoratorAlwaysSuccess_bt_Behavior_node15* node15 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node15;
										node15->SetClassNameString("DecoratorAlwaysSuccess");
										node15->SetId(15);
#if !BEHAVIAC_RELEASE
										node15->SetAgentType("behaviac::Agent");
#endif
										node66->AddChild(node15);
										{
											Sequence* node17 = BEHAVIAC_NEW Sequence;
											node17->SetClassNameString("Sequence");
											node17->SetId(17);
#if !BEHAVIAC_RELEASE
											node17->SetAgentType("behaviac::Agent");
#endif
											node15->AddChild(node17);
											{
												Condition_bt_Behavior_node16* node16 = BEHAVIAC_NEW Condition_bt_Behavior_node16;
												node16->SetClassNameString("Condition");
												node16->SetId(16);
#if !BEHAVIAC_RELEASE
												node16->SetAgentType("behaviac::Agent");
#endif
												node17->AddChild(node16);
												node17->SetHasEvents(node17->HasEvents() | node16->HasEvents());
											}
											{
												ReferencedBehavior_bt_Behavior_node63* node63 = BEHAVIAC_NEW ReferencedBehavior_bt_Behavior_node63;
												node63->SetClassNameString("ReferencedBehavior");
												node63->SetId(63);
#if !BEHAVIAC_RELEASE
												node63->SetAgentType("behaviac::Agent");
#endif
												node17->AddChild(node63);
												node17->SetHasEvents(node17->HasEvents() | node63->HasEvents());
											}
											node15->SetHasEvents(node15->HasEvents() | node17->HasEvents());
										}
										node66->SetHasEvents(node66->HasEvents() | node15->HasEvents());
									}
									{
										DecoratorAlwaysSuccess_bt_Behavior_node27* node27 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node27;
										node27->SetClassNameString("DecoratorAlwaysSuccess");
										node27->SetId(27);
#if !BEHAVIAC_RELEASE
										node27->SetAgentType("behaviac::Agent");
#endif
										node66->AddChild(node27);
										{
											Sequence* node19 = BEHAVIAC_NEW Sequence;
											node19->SetClassNameString("Sequence");
											node19->SetId(19);
#if !BEHAVIAC_RELEASE
											node19->SetAgentType("behaviac::Agent");
#endif
											node27->AddChild(node19);
											{
												Condition_bt_Behavior_node20* node20 = BEHAVIAC_NEW Condition_bt_Behavior_node20;
												node20->SetClassNameString("Condition");
												node20->SetId(20);
#if !BEHAVIAC_RELEASE
												node20->SetAgentType("behaviac::Agent");
#endif
												node19->AddChild(node20);
												node19->SetHasEvents(node19->HasEvents() | node20->HasEvents());
											}
											{
												Action_bt_Behavior_node78* node78 = BEHAVIAC_NEW Action_bt_Behavior_node78;
												node78->SetClassNameString("Action");
												node78->SetId(78);
#if !BEHAVIAC_RELEASE
												node78->SetAgentType("behaviac::Agent");
#endif
												node19->AddChild(node78);
												node19->SetHasEvents(node19->HasEvents() | node78->HasEvents());
											}
											{
												Assignment_bt_Behavior_node4* node4 = BEHAVIAC_NEW Assignment_bt_Behavior_node4;
												node4->SetClassNameString("Assignment");
												node4->SetId(4);
#if !BEHAVIAC_RELEASE
												node4->SetAgentType("behaviac::Agent");
#endif
												node19->AddChild(node4);
												node19->SetHasEvents(node19->HasEvents() | node4->HasEvents());
											}
											{
												Assignment_bt_Behavior_node12* node12 = BEHAVIAC_NEW Assignment_bt_Behavior_node12;
												node12->SetClassNameString("Assignment");
												node12->SetId(12);
#if !BEHAVIAC_RELEASE
												node12->SetAgentType("behaviac::Agent");
#endif
												node19->AddChild(node12);
												node19->SetHasEvents(node19->HasEvents() | node12->HasEvents());
											}
											node27->SetHasEvents(node27->HasEvents() | node19->HasEvents());
										}
										node66->SetHasEvents(node66->HasEvents() | node27->HasEvents());
									}
									{
										DecoratorAlwaysSuccess_bt_Behavior_node22* node22 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node22;
										node22->SetClassNameString("DecoratorAlwaysSuccess");
										node22->SetId(22);
#if !BEHAVIAC_RELEASE
										node22->SetAgentType("behaviac::Agent");
#endif
										node66->AddChild(node22);
										{
											Sequence* node8 = BEHAVIAC_NEW Sequence;
											node8->SetClassNameString("Sequence");
											node8->SetId(8);
#if !BEHAVIAC_RELEASE
											node8->SetAgentType("behaviac::Agent");
#endif
											node22->AddChild(node8);
											{
												Condition_bt_Behavior_node9* node9 = BEHAVIAC_NEW Condition_bt_Behavior_node9;
												node9->SetClassNameString("Condition");
												node9->SetId(9);
#if !BEHAVIAC_RELEASE
												node9->SetAgentType("behaviac::Agent");
#endif
												node8->AddChild(node9);
												node8->SetHasEvents(node8->HasEvents() | node9->HasEvents());
											}
											{
												Action_bt_Behavior_node69* node69 = BEHAVIAC_NEW Action_bt_Behavior_node69;
												node69->SetClassNameString("Action");
												node69->SetId(69);
#if !BEHAVIAC_RELEASE
												node69->SetAgentType("behaviac::Agent");
#endif
												node8->AddChild(node69);
												node8->SetHasEvents(node8->HasEvents() | node69->HasEvents());
											}
											{
												Action_bt_Behavior_node10* node10 = BEHAVIAC_NEW Action_bt_Behavior_node10;
												node10->SetClassNameString("Action");
												node10->SetId(10);
#if !BEHAVIAC_RELEASE
												node10->SetAgentType("behaviac::Agent");
#endif
												node8->AddChild(node10);
												node8->SetHasEvents(node8->HasEvents() | node10->HasEvents());
											}
											{
												Action_bt_Behavior_node14* node14 = BEHAVIAC_NEW Action_bt_Behavior_node14;
												node14->SetClassNameString("Action");
												node14->SetId(14);
#if !BEHAVIAC_RELEASE
												node14->SetAgentType("behaviac::Agent");
#endif
												node8->AddChild(node14);
												node8->SetHasEvents(node8->HasEvents() | node14->HasEvents());
											}
											{
												Assignment_bt_Behavior_node3* node3 = BEHAVIAC_NEW Assignment_bt_Behavior_node3;
												node3->SetClassNameString("Assignment");
												node3->SetId(3);
#if !BEHAVIAC_RELEASE
												node3->SetAgentType("behaviac::Agent");
#endif
												node8->AddChild(node3);
												node8->SetHasEvents(node8->HasEvents() | node3->HasEvents());
											}
											node22->SetHasEvents(node22->HasEvents() | node8->HasEvents());
										}
										node66->SetHasEvents(node66->HasEvents() | node22->HasEvents());
									}
									{
										DecoratorAlwaysSuccess_bt_Behavior_node49* node49 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node49;
										node49->SetClassNameString("DecoratorAlwaysSuccess");
										node49->SetId(49);
#if !BEHAVIAC_RELEASE
										node49->SetAgentType("behaviac::Agent");
#endif
										node66->AddChild(node49);
										{
											Sequence* node31 = BEHAVIAC_NEW Sequence;
											node31->SetClassNameString("Sequence");
											node31->SetId(31);
#if !BEHAVIAC_RELEASE
											node31->SetAgentType("behaviac::Agent");
#endif
											node49->AddChild(node31);
											{
												Condition_bt_Behavior_node40* node40 = BEHAVIAC_NEW Condition_bt_Behavior_node40;
												node40->SetClassNameString("Condition");
												node40->SetId(40);
#if !BEHAVIAC_RELEASE
												node40->SetAgentType("behaviac::Agent");
#endif
												node31->AddChild(node40);
												node31->SetHasEvents(node31->HasEvents() | node40->HasEvents());
											}
											{
												Action_bt_Behavior_node25* node25 = BEHAVIAC_NEW Action_bt_Behavior_node25;
												node25->SetClassNameString("Action");
												node25->SetId(25);
#if !BEHAVIAC_RELEASE
												node25->SetAgentType("behaviac::Agent");
#endif
												node31->AddChild(node25);
												node31->SetHasEvents(node31->HasEvents() | node25->HasEvents());
											}
											{
												Selector* node0 = BEHAVIAC_NEW Selector;
												node0->SetClassNameString("Selector");
												node0->SetId(0);
#if !BEHAVIAC_RELEASE
												node0->SetAgentType("behaviac::Agent");
#endif
												node31->AddChild(node0);
												{
													Sequence* node41 = BEHAVIAC_NEW Sequence;
													node41->SetClassNameString("Sequence");
													node41->SetId(41);
#if !BEHAVIAC_RELEASE
													node41->SetAgentType("behaviac::Agent");
#endif
													node0->AddChild(node41);
													{
														Condition_bt_Behavior_node42* node42 = BEHAVIAC_NEW Condition_bt_Behavior_node42;
														node42->SetClassNameString("Condition");
														node42->SetId(42);
#if !BEHAVIAC_RELEASE
														node42->SetAgentType("behaviac::Agent");
#endif
														node41->AddChild(node42);
														node41->SetHasEvents(node41->HasEvents() | node42->HasEvents());
													}
													{
														Assignment_bt_Behavior_node43* node43 = BEHAVIAC_NEW Assignment_bt_Behavior_node43;
														node43->SetClassNameString("Assignment");
														node43->SetId(43);
#if !BEHAVIAC_RELEASE
														node43->SetAgentType("behaviac::Agent");
#endif
														node41->AddChild(node43);
														node41->SetHasEvents(node41->HasEvents() | node43->HasEvents());
													}
													{
														Assignment_bt_Behavior_node64* node64 = BEHAVIAC_NEW Assignment_bt_Behavior_node64;
														node64->SetClassNameString("Assignment");
														node64->SetId(64);
#if !BEHAVIAC_RELEASE
														node64->SetAgentType("behaviac::Agent");
#endif
														node41->AddChild(node64);
														node41->SetHasEvents(node41->HasEvents() | node64->HasEvents());
													}
													node0->SetHasEvents(node0->HasEvents() | node41->HasEvents());
												}
												{
													Assignment_bt_Behavior_node7* node7 = BEHAVIAC_NEW Assignment_bt_Behavior_node7;
													node7->SetClassNameString("Assignment");
													node7->SetId(7);
#if !BEHAVIAC_RELEASE
													node7->SetAgentType("behaviac::Agent");
#endif
													node0->AddChild(node7);
													node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
												}
												node31->SetHasEvents(node31->HasEvents() | node0->HasEvents());
											}
											{
												Assignment_bt_Behavior_node44* node44 = BEHAVIAC_NEW Assignment_bt_Behavior_node44;
												node44->SetClassNameString("Assignment");
												node44->SetId(44);
#if !BEHAVIAC_RELEASE
												node44->SetAgentType("behaviac::Agent");
#endif
												node31->AddChild(node44);
												node31->SetHasEvents(node31->HasEvents() | node44->HasEvents());
											}
											node49->SetHasEvents(node49->HasEvents() | node31->HasEvents());
										}
										node66->SetHasEvents(node66->HasEvents() | node49->HasEvents());
									}
									{
										DecoratorAlwaysSuccess_bt_Behavior_node72* node72 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node72;
										node72->SetClassNameString("DecoratorAlwaysSuccess");
										node72->SetId(72);
#if !BEHAVIAC_RELEASE
										node72->SetAgentType("behaviac::Agent");
#endif
										node66->AddChild(node72);
										{
											Sequence* node6 = BEHAVIAC_NEW Sequence;
											node6->SetClassNameString("Sequence");
											node6->SetId(6);
#if !BEHAVIAC_RELEASE
											node6->SetAgentType("behaviac::Agent");
#endif
											node72->AddChild(node6);
											{
												Condition_bt_Behavior_node74* node74 = BEHAVIAC_NEW Condition_bt_Behavior_node74;
												node74->SetClassNameString("Condition");
												node74->SetId(74);
#if !BEHAVIAC_RELEASE
												node74->SetAgentType("behaviac::Agent");
#endif
												node6->AddChild(node74);
												node6->SetHasEvents(node6->HasEvents() | node74->HasEvents());
											}
											{
												Action_bt_Behavior_node45* node45 = BEHAVIAC_NEW Action_bt_Behavior_node45;
												node45->SetClassNameString("Action");
												node45->SetId(45);
#if !BEHAVIAC_RELEASE
												node45->SetAgentType("behaviac::Agent");
#endif
												node6->AddChild(node45);
												node6->SetHasEvents(node6->HasEvents() | node45->HasEvents());
											}
											{
												Assignment_bt_Behavior_node73* node73 = BEHAVIAC_NEW Assignment_bt_Behavior_node73;
												node73->SetClassNameString("Assignment");
												node73->SetId(73);
#if !BEHAVIAC_RELEASE
												node73->SetAgentType("behaviac::Agent");
#endif
												node6->AddChild(node73);
												node6->SetHasEvents(node6->HasEvents() | node73->HasEvents());
											}
											{
												Condition_bt_Behavior_node75* node75 = BEHAVIAC_NEW Condition_bt_Behavior_node75;
												node75->SetClassNameString("Condition");
												node75->SetId(75);
#if !BEHAVIAC_RELEASE
												node75->SetAgentType("behaviac::Agent");
#endif
												node6->AddChild(node75);
												node6->SetHasEvents(node6->HasEvents() | node75->HasEvents());
											}
											node72->SetHasEvents(node72->HasEvents() | node6->HasEvents());
										}
										node66->SetHasEvents(node66->HasEvents() | node72->HasEvents());
									}
									{
										Condition_bt_Behavior_node47* node47 = BEHAVIAC_NEW Condition_bt_Behavior_node47;
										node47->SetClassNameString("Condition");
										node47->SetId(47);
#if !BEHAVIAC_RELEASE
										node47->SetAgentType("behaviac::Agent");
#endif
										node66->AddChild(node47);
										node66->SetHasEvents(node66->HasEvents() | node47->HasEvents());
									}
									node1->SetHasEvents(node1->HasEvents() | node66->HasEvents());
								}
								node18->SetHasEvents(node18->HasEvents() | node1->HasEvents());
							}
							node65->SetHasEvents(node65->HasEvents() | node18->HasEvents());
						}
						{
							Sequence* node24 = BEHAVIAC_NEW Sequence;
							node24->SetClassNameString("Sequence");
							node24->SetId(24);
#if !BEHAVIAC_RELEASE
							node24->SetAgentType("behaviac::Agent");
#endif
							node65->AddChild(node24);
							{
								Action_bt_Behavior_node26* node26 = BEHAVIAC_NEW Action_bt_Behavior_node26;
								node26->SetClassNameString("Action");
								node26->SetId(26);
#if !BEHAVIAC_RELEASE
								node26->SetAgentType("behaviac::Agent");
#endif
								node24->AddChild(node26);
								node24->SetHasEvents(node24->HasEvents() | node26->HasEvents());
							}
							{
								Action_bt_Behavior_node76* node76 = BEHAVIAC_NEW Action_bt_Behavior_node76;
								node76->SetClassNameString("Action");
								node76->SetId(76);
#if !BEHAVIAC_RELEASE
								node76->SetAgentType("behaviac::Agent");
#endif
								node24->AddChild(node76);
								node24->SetHasEvents(node24->HasEvents() | node76->HasEvents());
							}
							{
								Action_bt_Behavior_node77* node77 = BEHAVIAC_NEW Action_bt_Behavior_node77;
								node77->SetClassNameString("Action");
								node77->SetId(77);
#if !BEHAVIAC_RELEASE
								node77->SetAgentType("behaviac::Agent");
#endif
								node24->AddChild(node77);
								node24->SetHasEvents(node24->HasEvents() | node77->HasEvents());
							}
							{
								DecoratorLoopUntil_bt_Behavior_node28* node28 = BEHAVIAC_NEW DecoratorLoopUntil_bt_Behavior_node28;
								node28->SetClassNameString("DecoratorLoopUntil");
								node28->SetId(28);
#if !BEHAVIAC_RELEASE
								node28->SetAgentType("behaviac::Agent");
#endif
								node24->AddChild(node28);
								{
									Sequence* node39 = BEHAVIAC_NEW Sequence;
									node39->SetClassNameString("Sequence");
									node39->SetId(39);
#if !BEHAVIAC_RELEASE
									node39->SetAgentType("behaviac::Agent");
#endif
									node28->AddChild(node39);
									{
										DecoratorAlwaysSuccess_bt_Behavior_node21* node21 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node21;
										node21->SetClassNameString("DecoratorAlwaysSuccess");
										node21->SetId(21);
#if !BEHAVIAC_RELEASE
										node21->SetAgentType("behaviac::Agent");
#endif
										node39->AddChild(node21);
										{
											Sequence* node30 = BEHAVIAC_NEW Sequence;
											node30->SetClassNameString("Sequence");
											node30->SetId(30);
#if !BEHAVIAC_RELEASE
											node30->SetAgentType("behaviac::Agent");
#endif
											node21->AddChild(node30);
											{
												Condition_bt_Behavior_node51* node51 = BEHAVIAC_NEW Condition_bt_Behavior_node51;
												node51->SetClassNameString("Condition");
												node51->SetId(51);
#if !BEHAVIAC_RELEASE
												node51->SetAgentType("behaviac::Agent");
#endif
												node30->AddChild(node51);
												node30->SetHasEvents(node30->HasEvents() | node51->HasEvents());
											}
											{
												ReferencedBehavior_bt_Behavior_node56* node56 = BEHAVIAC_NEW ReferencedBehavior_bt_Behavior_node56;
												node56->SetClassNameString("ReferencedBehavior");
												node56->SetId(56);
#if !BEHAVIAC_RELEASE
												node56->SetAgentType("behaviac::Agent");
#endif
												node30->AddChild(node56);
												node30->SetHasEvents(node30->HasEvents() | node56->HasEvents());
											}
											node21->SetHasEvents(node21->HasEvents() | node30->HasEvents());
										}
										node39->SetHasEvents(node39->HasEvents() | node21->HasEvents());
									}
									{
										DecoratorAlwaysSuccess_bt_Behavior_node29* node29 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node29;
										node29->SetClassNameString("DecoratorAlwaysSuccess");
										node29->SetId(29);
#if !BEHAVIAC_RELEASE
										node29->SetAgentType("behaviac::Agent");
#endif
										node39->AddChild(node29);
										{
											Sequence* node54 = BEHAVIAC_NEW Sequence;
											node54->SetClassNameString("Sequence");
											node54->SetId(54);
#if !BEHAVIAC_RELEASE
											node54->SetAgentType("behaviac::Agent");
#endif
											node29->AddChild(node54);
											{
												Condition_bt_Behavior_node55* node55 = BEHAVIAC_NEW Condition_bt_Behavior_node55;
												node55->SetClassNameString("Condition");
												node55->SetId(55);
#if !BEHAVIAC_RELEASE
												node55->SetAgentType("behaviac::Agent");
#endif
												node54->AddChild(node55);
												node54->SetHasEvents(node54->HasEvents() | node55->HasEvents());
											}
											{
												Action_bt_Behavior_node48* node48 = BEHAVIAC_NEW Action_bt_Behavior_node48;
												node48->SetClassNameString("Action");
												node48->SetId(48);
#if !BEHAVIAC_RELEASE
												node48->SetAgentType("behaviac::Agent");
#endif
												node54->AddChild(node48);
												node54->SetHasEvents(node54->HasEvents() | node48->HasEvents());
											}
											{
												Selector* node57 = BEHAVIAC_NEW Selector;
												node57->SetClassNameString("Selector");
												node57->SetId(57);
#if !BEHAVIAC_RELEASE
												node57->SetAgentType("behaviac::Agent");
#endif
												node54->AddChild(node57);
												{
													Sequence* node58 = BEHAVIAC_NEW Sequence;
													node58->SetClassNameString("Sequence");
													node58->SetId(58);
#if !BEHAVIAC_RELEASE
													node58->SetAgentType("behaviac::Agent");
#endif
													node57->AddChild(node58);
													{
														Condition_bt_Behavior_node59* node59 = BEHAVIAC_NEW Condition_bt_Behavior_node59;
														node59->SetClassNameString("Condition");
														node59->SetId(59);
#if !BEHAVIAC_RELEASE
														node59->SetAgentType("behaviac::Agent");
#endif
														node58->AddChild(node59);
														node58->SetHasEvents(node58->HasEvents() | node59->HasEvents());
													}
													{
														Assignment_bt_Behavior_node60* node60 = BEHAVIAC_NEW Assignment_bt_Behavior_node60;
														node60->SetClassNameString("Assignment");
														node60->SetId(60);
#if !BEHAVIAC_RELEASE
														node60->SetAgentType("behaviac::Agent");
#endif
														node58->AddChild(node60);
														node58->SetHasEvents(node58->HasEvents() | node60->HasEvents());
													}
													{
														Assignment_bt_Behavior_node68* node68 = BEHAVIAC_NEW Assignment_bt_Behavior_node68;
														node68->SetClassNameString("Assignment");
														node68->SetId(68);
#if !BEHAVIAC_RELEASE
														node68->SetAgentType("behaviac::Agent");
#endif
														node58->AddChild(node68);
														node58->SetHasEvents(node58->HasEvents() | node68->HasEvents());
													}
													node57->SetHasEvents(node57->HasEvents() | node58->HasEvents());
												}
												{
													Assignment_bt_Behavior_node61* node61 = BEHAVIAC_NEW Assignment_bt_Behavior_node61;
													node61->SetClassNameString("Assignment");
													node61->SetId(61);
#if !BEHAVIAC_RELEASE
													node61->SetAgentType("behaviac::Agent");
#endif
													node57->AddChild(node61);
													node57->SetHasEvents(node57->HasEvents() | node61->HasEvents());
												}
												node54->SetHasEvents(node54->HasEvents() | node57->HasEvents());
											}
											{
												Assignment_bt_Behavior_node62* node62 = BEHAVIAC_NEW Assignment_bt_Behavior_node62;
												node62->SetClassNameString("Assignment");
												node62->SetId(62);
#if !BEHAVIAC_RELEASE
												node62->SetAgentType("behaviac::Agent");
#endif
												node54->AddChild(node62);
												node54->SetHasEvents(node54->HasEvents() | node62->HasEvents());
											}
											node29->SetHasEvents(node29->HasEvents() | node54->HasEvents());
										}
										node39->SetHasEvents(node39->HasEvents() | node29->HasEvents());
									}
									{
										DecoratorAlwaysSuccess_bt_Behavior_node52* node52 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node52;
										node52->SetClassNameString("DecoratorAlwaysSuccess");
										node52->SetId(52);
#if !BEHAVIAC_RELEASE
										node52->SetAgentType("behaviac::Agent");
#endif
										node39->AddChild(node52);
										{
											Sequence* node32 = BEHAVIAC_NEW Sequence;
											node32->SetClassNameString("Sequence");
											node32->SetId(32);
#if !BEHAVIAC_RELEASE
											node32->SetAgentType("behaviac::Agent");
#endif
											node52->AddChild(node32);
											{
												Condition_bt_Behavior_node2* node2 = BEHAVIAC_NEW Condition_bt_Behavior_node2;
												node2->SetClassNameString("Condition");
												node2->SetId(2);
#if !BEHAVIAC_RELEASE
												node2->SetAgentType("behaviac::Agent");
#endif
												node32->AddChild(node2);
												node32->SetHasEvents(node32->HasEvents() | node2->HasEvents());
											}
											{
												Action_bt_Behavior_node79* node79 = BEHAVIAC_NEW Action_bt_Behavior_node79;
												node79->SetClassNameString("Action");
												node79->SetId(79);
#if !BEHAVIAC_RELEASE
												node79->SetAgentType("behaviac::Agent");
#endif
												node32->AddChild(node79);
												node32->SetHasEvents(node32->HasEvents() | node79->HasEvents());
											}
											{
												Assignment_bt_Behavior_node33* node33 = BEHAVIAC_NEW Assignment_bt_Behavior_node33;
												node33->SetClassNameString("Assignment");
												node33->SetId(33);
#if !BEHAVIAC_RELEASE
												node33->SetAgentType("behaviac::Agent");
#endif
												node32->AddChild(node33);
												node32->SetHasEvents(node32->HasEvents() | node33->HasEvents());
											}
											{
												Condition_bt_Behavior_node34* node34 = BEHAVIAC_NEW Condition_bt_Behavior_node34;
												node34->SetClassNameString("Condition");
												node34->SetId(34);
#if !BEHAVIAC_RELEASE
												node34->SetAgentType("behaviac::Agent");
#endif
												node32->AddChild(node34);
												node32->SetHasEvents(node32->HasEvents() | node34->HasEvents());
											}
											node52->SetHasEvents(node52->HasEvents() | node32->HasEvents());
										}
										node39->SetHasEvents(node39->HasEvents() | node52->HasEvents());
									}
									{
										DecoratorAlwaysSuccess_bt_Behavior_node53* node53 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_Behavior_node53;
										node53->SetClassNameString("DecoratorAlwaysSuccess");
										node53->SetId(53);
#if !BEHAVIAC_RELEASE
										node53->SetAgentType("behaviac::Agent");
#endif
										node39->AddChild(node53);
										{
											Sequence* node35 = BEHAVIAC_NEW Sequence;
											node35->SetClassNameString("Sequence");
											node35->SetId(35);
#if !BEHAVIAC_RELEASE
											node35->SetAgentType("behaviac::Agent");
#endif
											node53->AddChild(node35);
											{
												Condition_bt_Behavior_node36* node36 = BEHAVIAC_NEW Condition_bt_Behavior_node36;
												node36->SetClassNameString("Condition");
												node36->SetId(36);
#if !BEHAVIAC_RELEASE
												node36->SetAgentType("behaviac::Agent");
#endif
												node35->AddChild(node36);
												node35->SetHasEvents(node35->HasEvents() | node36->HasEvents());
											}
											{
												Action_bt_Behavior_node23* node23 = BEHAVIAC_NEW Action_bt_Behavior_node23;
												node23->SetClassNameString("Action");
												node23->SetId(23);
#if !BEHAVIAC_RELEASE
												node23->SetAgentType("behaviac::Agent");
#endif
												node35->AddChild(node23);
												node35->SetHasEvents(node35->HasEvents() | node23->HasEvents());
											}
											{
												Action_bt_Behavior_node37* node37 = BEHAVIAC_NEW Action_bt_Behavior_node37;
												node37->SetClassNameString("Action");
												node37->SetId(37);
#if !BEHAVIAC_RELEASE
												node37->SetAgentType("behaviac::Agent");
#endif
												node35->AddChild(node37);
												node35->SetHasEvents(node35->HasEvents() | node37->HasEvents());
											}
											{
												Action_bt_Behavior_node38* node38 = BEHAVIAC_NEW Action_bt_Behavior_node38;
												node38->SetClassNameString("Action");
												node38->SetId(38);
#if !BEHAVIAC_RELEASE
												node38->SetAgentType("behaviac::Agent");
#endif
												node35->AddChild(node38);
												node35->SetHasEvents(node35->HasEvents() | node38->HasEvents());
											}
											{
												Assignment_bt_Behavior_node13* node13 = BEHAVIAC_NEW Assignment_bt_Behavior_node13;
												node13->SetClassNameString("Assignment");
												node13->SetId(13);
#if !BEHAVIAC_RELEASE
												node13->SetAgentType("behaviac::Agent");
#endif
												node35->AddChild(node13);
												node35->SetHasEvents(node35->HasEvents() | node13->HasEvents());
											}
											node53->SetHasEvents(node53->HasEvents() | node35->HasEvents());
										}
										node39->SetHasEvents(node39->HasEvents() | node53->HasEvents());
									}
									{
										Condition_bt_Behavior_node11* node11 = BEHAVIAC_NEW Condition_bt_Behavior_node11;
										node11->SetClassNameString("Condition");
										node11->SetId(11);
#if !BEHAVIAC_RELEASE
										node11->SetAgentType("behaviac::Agent");
#endif
										node39->AddChild(node11);
										node39->SetHasEvents(node39->HasEvents() | node11->HasEvents());
									}
									node28->SetHasEvents(node28->HasEvents() | node39->HasEvents());
								}
								node24->SetHasEvents(node24->HasEvents() | node28->HasEvents());
							}
							node65->SetHasEvents(node65->HasEvents() | node24->HasEvents());
						}
						node46->SetHasEvents(node46->HasEvents() | node65->HasEvents());
					}
					node67->SetHasEvents(node67->HasEvents() | node46->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node67->HasEvents());
			}
			return true;
		}
	};

	// Source file: Interact

	class Condition_bt_Interact_node1 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Interact_node1, Condition);
		Condition_bt_Interact_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Interact");
			BEHAVIAC_ASSERT(pAgent_opl);
			TaskType& opl = ((Interact*)pAgent_opl)->InteractTask;
			TaskType opr = SetTargetType;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Interact_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Interact_node7, Action);
		Action_bt_Interact_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Interact");
			BEHAVIAC_ASSERT(pAgent_method);
			((Interact*)pAgent_method)->SetTargetType();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_Interact_node17 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Interact_node17, Condition);
		Condition_bt_Interact_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Recognize*)pAgent_opl)->CanBeRecognized;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_Interact_node19 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Interact_node19, Condition);
		Condition_bt_Interact_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Recognize*)pAgent_opl)->NeedEliminated;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_Interact_node21 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Interact_node21, Condition);
		Condition_bt_Interact_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Recognize*)pAgent_opl)->TargetAhead;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_Interact_node16 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Interact_node16, Condition);
		Condition_bt_Interact_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_opl);
			bool& opl = ((Recognize*)pAgent_opl)->AmmunitionAvaiable;
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Interact_node10 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Interact_node10, Action);
		Action_bt_Interact_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_method);
			((Recognize*)pAgent_method)->Eliminate();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Interact_node25 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Interact_node25, Assignment);
		Assignment_bt_Interact_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Coverage");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Action_bt_Interact_node22 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Interact_node22, Action);
		Action_bt_Interact_node22()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_method);
			((Recognize*)pAgent_method)->AddToEliminate();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Interact_node68 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Interact_node68, Assignment);
		Assignment_bt_Interact_node68()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Action_bt_Interact_node23 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Interact_node23, Action);
		Action_bt_Interact_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Recognize");
			BEHAVIAC_ASSERT(pAgent_method);
			((Recognize*)pAgent_method)->AddToRevisit();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_Interact_node24 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_Interact_node24, Assignment);
		Assignment_bt_Interact_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Revisit");
			BEHAVIAC_ASSERT(pAgent_opl);
			((Process*)pAgent_opl)->Replan = opr;
			return result;
		}
	};

	class Condition_bt_Interact_node2 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Interact_node2, Condition);
		Condition_bt_Interact_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Interact");
			BEHAVIAC_ASSERT(pAgent_opl);
			TaskType& opl = ((Interact*)pAgent_opl)->InteractTask;
			TaskType opr = TurnBack;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Interact_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Interact_node9, Action);
		Action_bt_Interact_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Interact");
			BEHAVIAC_ASSERT(pAgent_method);
			((Interact*)pAgent_method)->_Execute_Method_<METHOD_TYPE_Interact_TurnBack, void >();
			return BT_SUCCESS;
		}
	};

	class Action_bt_Interact_node45 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Interact_node45, Action);
		Action_bt_Interact_node45()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "blackboard");
			BEHAVIAC_ASSERT(pAgent_method);
			((blackboard*)pAgent_method)->StateUpdate();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_Interact_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_Interact_node3, Condition);
		Condition_bt_Interact_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "Interact");
			BEHAVIAC_ASSERT(pAgent_opl);
			TaskType& opl = ((Interact*)pAgent_opl)->InteractTask;
			TaskType opr = MoveTo;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_Interact_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_Interact_node8, Action);
		Action_bt_Interact_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "Interact");
			BEHAVIAC_ASSERT(pAgent_method);
			((Interact*)pAgent_method)->_Execute_Method_<METHOD_TYPE_Interact_MoveTo, void >();
			return BT_SUCCESS;
		}
	};

	class bt_Interact
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("Interact");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("Interact");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("Interact");
#endif
				pBT->AddChild(node0);
				{
					Sequence* node4 = BEHAVIAC_NEW Sequence;
					node4->SetClassNameString("Sequence");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("Interact");
#endif
					node0->AddChild(node4);
					{
						Condition_bt_Interact_node1* node1 = BEHAVIAC_NEW Condition_bt_Interact_node1;
						node1->SetClassNameString("Condition");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("Interact");
#endif
						node4->AddChild(node1);
						node4->SetHasEvents(node4->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_Interact_node7* node7 = BEHAVIAC_NEW Action_bt_Interact_node7;
						node7->SetClassNameString("Action");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("Interact");
#endif
						node4->AddChild(node7);
						node4->SetHasEvents(node4->HasEvents() | node7->HasEvents());
					}
					{
						Selector* node12 = BEHAVIAC_NEW Selector;
						node12->SetClassNameString("Selector");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("Interact");
#endif
						node4->AddChild(node12);
						{
							Sequence* node11 = BEHAVIAC_NEW Sequence;
							node11->SetClassNameString("Sequence");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("Interact");
#endif
							node12->AddChild(node11);
							{
								Condition_bt_Interact_node17* node17 = BEHAVIAC_NEW Condition_bt_Interact_node17;
								node17->SetClassNameString("Condition");
								node17->SetId(17);
#if !BEHAVIAC_RELEASE
								node17->SetAgentType("Interact");
#endif
								node11->AddChild(node17);
								node11->SetHasEvents(node11->HasEvents() | node17->HasEvents());
							}
							{
								Selector* node13 = BEHAVIAC_NEW Selector;
								node13->SetClassNameString("Selector");
								node13->SetId(13);
#if !BEHAVIAC_RELEASE
								node13->SetAgentType("Interact");
#endif
								node11->AddChild(node13);
								{
									Sequence* node18 = BEHAVIAC_NEW Sequence;
									node18->SetClassNameString("Sequence");
									node18->SetId(18);
#if !BEHAVIAC_RELEASE
									node18->SetAgentType("Interact");
#endif
									node13->AddChild(node18);
									{
										Condition_bt_Interact_node19* node19 = BEHAVIAC_NEW Condition_bt_Interact_node19;
										node19->SetClassNameString("Condition");
										node19->SetId(19);
#if !BEHAVIAC_RELEASE
										node19->SetAgentType("Interact");
#endif
										node18->AddChild(node19);
										node18->SetHasEvents(node18->HasEvents() | node19->HasEvents());
									}
									{
										Selector* node15 = BEHAVIAC_NEW Selector;
										node15->SetClassNameString("Selector");
										node15->SetId(15);
#if !BEHAVIAC_RELEASE
										node15->SetAgentType("Interact");
#endif
										node18->AddChild(node15);
										{
											Sequence* node20 = BEHAVIAC_NEW Sequence;
											node20->SetClassNameString("Sequence");
											node20->SetId(20);
#if !BEHAVIAC_RELEASE
											node20->SetAgentType("Interact");
#endif
											node15->AddChild(node20);
											{
												Condition_bt_Interact_node21* node21 = BEHAVIAC_NEW Condition_bt_Interact_node21;
												node21->SetClassNameString("Condition");
												node21->SetId(21);
#if !BEHAVIAC_RELEASE
												node21->SetAgentType("Interact");
#endif
												node20->AddChild(node21);
												node20->SetHasEvents(node20->HasEvents() | node21->HasEvents());
											}
											{
												Condition_bt_Interact_node16* node16 = BEHAVIAC_NEW Condition_bt_Interact_node16;
												node16->SetClassNameString("Condition");
												node16->SetId(16);
#if !BEHAVIAC_RELEASE
												node16->SetAgentType("Interact");
#endif
												node20->AddChild(node16);
												node20->SetHasEvents(node20->HasEvents() | node16->HasEvents());
											}
											{
												Action_bt_Interact_node10* node10 = BEHAVIAC_NEW Action_bt_Interact_node10;
												node10->SetClassNameString("Action");
												node10->SetId(10);
#if !BEHAVIAC_RELEASE
												node10->SetAgentType("Interact");
#endif
												node20->AddChild(node10);
												node20->SetHasEvents(node20->HasEvents() | node10->HasEvents());
											}
											{
												Assignment_bt_Interact_node25* node25 = BEHAVIAC_NEW Assignment_bt_Interact_node25;
												node25->SetClassNameString("Assignment");
												node25->SetId(25);
#if !BEHAVIAC_RELEASE
												node25->SetAgentType("Interact");
#endif
												node20->AddChild(node25);
												node20->SetHasEvents(node20->HasEvents() | node25->HasEvents());
											}
											node15->SetHasEvents(node15->HasEvents() | node20->HasEvents());
										}
										{
											Sequence* node28 = BEHAVIAC_NEW Sequence;
											node28->SetClassNameString("Sequence");
											node28->SetId(28);
#if !BEHAVIAC_RELEASE
											node28->SetAgentType("Interact");
#endif
											node15->AddChild(node28);
											{
												Action_bt_Interact_node22* node22 = BEHAVIAC_NEW Action_bt_Interact_node22;
												node22->SetClassNameString("Action");
												node22->SetId(22);
#if !BEHAVIAC_RELEASE
												node22->SetAgentType("Interact");
#endif
												node28->AddChild(node22);
												node28->SetHasEvents(node28->HasEvents() | node22->HasEvents());
											}
											{
												Assignment_bt_Interact_node68* node68 = BEHAVIAC_NEW Assignment_bt_Interact_node68;
												node68->SetClassNameString("Assignment");
												node68->SetId(68);
#if !BEHAVIAC_RELEASE
												node68->SetAgentType("Interact");
#endif
												node28->AddChild(node68);
												node28->SetHasEvents(node28->HasEvents() | node68->HasEvents());
											}
											node15->SetHasEvents(node15->HasEvents() | node28->HasEvents());
										}
										node18->SetHasEvents(node18->HasEvents() | node15->HasEvents());
									}
									node13->SetHasEvents(node13->HasEvents() | node18->HasEvents());
								}
								{
									Noop* node14 = BEHAVIAC_NEW Noop;
									node14->SetClassNameString("Noop");
									node14->SetId(14);
#if !BEHAVIAC_RELEASE
									node14->SetAgentType("Interact");
#endif
									node13->AddChild(node14);
									node13->SetHasEvents(node13->HasEvents() | node14->HasEvents());
								}
								node11->SetHasEvents(node11->HasEvents() | node13->HasEvents());
							}
							node12->SetHasEvents(node12->HasEvents() | node11->HasEvents());
						}
						{
							Sequence* node27 = BEHAVIAC_NEW Sequence;
							node27->SetClassNameString("Sequence");
							node27->SetId(27);
#if !BEHAVIAC_RELEASE
							node27->SetAgentType("Interact");
#endif
							node12->AddChild(node27);
							{
								Action_bt_Interact_node23* node23 = BEHAVIAC_NEW Action_bt_Interact_node23;
								node23->SetClassNameString("Action");
								node23->SetId(23);
#if !BEHAVIAC_RELEASE
								node23->SetAgentType("Interact");
#endif
								node27->AddChild(node23);
								node27->SetHasEvents(node27->HasEvents() | node23->HasEvents());
							}
							{
								Assignment_bt_Interact_node24* node24 = BEHAVIAC_NEW Assignment_bt_Interact_node24;
								node24->SetClassNameString("Assignment");
								node24->SetId(24);
#if !BEHAVIAC_RELEASE
								node24->SetAgentType("Interact");
#endif
								node27->AddChild(node24);
								node27->SetHasEvents(node27->HasEvents() | node24->HasEvents());
							}
							node12->SetHasEvents(node12->HasEvents() | node27->HasEvents());
						}
						node4->SetHasEvents(node4->HasEvents() | node12->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Sequence* node5 = BEHAVIAC_NEW Sequence;
					node5->SetClassNameString("Sequence");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("Interact");
#endif
					node0->AddChild(node5);
					{
						Condition_bt_Interact_node2* node2 = BEHAVIAC_NEW Condition_bt_Interact_node2;
						node2->SetClassNameString("Condition");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("Interact");
#endif
						node5->AddChild(node2);
						node5->SetHasEvents(node5->HasEvents() | node2->HasEvents());
					}
					{
						Action_bt_Interact_node9* node9 = BEHAVIAC_NEW Action_bt_Interact_node9;
						node9->SetClassNameString("Action");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("Interact");
#endif
						node5->AddChild(node9);
						node5->SetHasEvents(node5->HasEvents() | node9->HasEvents());
					}
					{
						Action_bt_Interact_node45* node45 = BEHAVIAC_NEW Action_bt_Interact_node45;
						node45->SetClassNameString("Action");
						node45->SetId(45);
#if !BEHAVIAC_RELEASE
						node45->SetAgentType("Interact");
#endif
						node5->AddChild(node45);
						node5->SetHasEvents(node5->HasEvents() | node45->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Sequence* node6 = BEHAVIAC_NEW Sequence;
					node6->SetClassNameString("Sequence");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("Interact");
#endif
					node0->AddChild(node6);
					{
						Condition_bt_Interact_node3* node3 = BEHAVIAC_NEW Condition_bt_Interact_node3;
						node3->SetClassNameString("Condition");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("Interact");
#endif
						node6->AddChild(node3);
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_Interact_node8* node8 = BEHAVIAC_NEW Action_bt_Interact_node8;
						node8->SetClassNameString("Action");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("Interact");
#endif
						node6->AddChild(node8);
						node6->SetHasEvents(node6->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

}
#endif // _BEHAVIAC_GENERATED_BEHAVIORS_H_
