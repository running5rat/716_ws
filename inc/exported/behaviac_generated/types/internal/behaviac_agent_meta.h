// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_AGENT_PROPERTIES_H_
#define _BEHAVIAC_AGENT_PROPERTIES_H_

#include "behaviac_agent_headers.h"
#include "behaviac_agent_member_visitor.h"
#include "behaviac_customized_types.h"

namespace behaviac
{
	// ---------------------------------------------------------------------
	// Delegate methods
	// ---------------------------------------------------------------------

	inline void FunctionPointer_behaviac_Agent_LogMessage(char* param0) { behaviac::Agent::LogMessage(param0); }

	inline void Set_blackboard_ManualCommand(Agent* self, bool value) { ((blackboard*)self)->ManualCommand = value; };
	inline const void* Get_blackboard_ManualCommand(Agent* self) { return &((blackboard*)self)->ManualCommand; };

	inline void Set_blackboard_NewTarget(Agent* self, bool value) { ((blackboard*)self)->NewTarget = value; };
	inline const void* Get_blackboard_NewTarget(Agent* self) { return &((blackboard*)self)->NewTarget; };

	inline void Set_blackboard_TargetsFound(Agent* self, int value) { ((blackboard*)self)->TargetsFound = value; };
	inline const void* Get_blackboard_TargetsFound(Agent* self) { return &((blackboard*)self)->TargetsFound; };

	inline void Set_blackboard_TotalTargets(Agent* self, int value) { ((blackboard*)self)->TotalTargets = value; };
	inline const void* Get_blackboard_TotalTargets(Agent* self) { return &((blackboard*)self)->TotalTargets; };

	inline void FunctionPointer_blackboard_LogicInit(Agent* self) { ((blackboard*)self)->LogicInit(); }
	inline void FunctionPointer_blackboard_LogMessage(char* param0) { blackboard::LogMessage(param0); }

	inline void Set_Process_Finnished(Agent* self, bool value) { ((Process*)self)->Finnished = value; };
	inline const void* Get_Process_Finnished(Agent* self) { return &((Process*)self)->Finnished; };

	inline void Set_Process_Init(Agent* self, bool value) { ((Process*)self)->Init = value; };
	inline const void* Get_Process_Init(Agent* self) { return &((Process*)self)->Init; };

	inline void Set_Process_Replan(Agent* self, bool value) { ((Process*)self)->Replan = value; };
	inline const void* Get_Process_Replan(Agent* self) { return &((Process*)self)->Replan; };

	inline void Set_Process_VehicleID(Agent* self, behaviac::vector<int> value) { ((Process*)self)->VehicleID = value; };
	inline const void* Get_Process_VehicleID(Agent* self) { return &((Process*)self)->VehicleID; };

	inline void Set_Process_VehicleID(Agent* self, int value, int index) { ((Process*)self)->VehicleID[index] = value; };
	inline const void* Get_Process_VehicleID(Agent* self, int index) { return &((Process*)self)->VehicleID[index]; };

	inline void FunctionPointer_Process_LogMessage(char* param0) { Process::LogMessage(param0); }
	inline bool FunctionPointer_Process_VehicleVectorEmpty(Agent* self) { return (bool)((Process*)self)->_Execute_Method_<METHOD_TYPE_Process_VehicleVectorEmpty, bool >(); }
	inline void FunctionPointer_Coverage_DevideArea(Agent* self) { ((Coverage*)self)->DevideArea(); }
	inline void FunctionPointer_Coverage_FindCoveragePath(Agent* self) { ((Coverage*)self)->FindCoveragePath(); }
	inline void FunctionPointer_Coverage_LogMessage(char* param0) { Coverage::LogMessage(param0); }
	inline void FunctionPointer_Coverage_SetGroup(Agent* self) { ((Coverage*)self)->_Execute_Method_<METHOD_TYPE_Coverage_SetGroup, void >(); }
	inline bool FunctionPointer_Coverage_VehicleVectorEmpty(Agent* self) { return (bool)((Process*)self)->_Execute_Method_<METHOD_TYPE_Process_VehicleVectorEmpty, bool >(); }

	inline void Set_Revisit_IgnoreBlindSpot(Agent* self, bool value) { ((Revisit*)self)->IgnoreBlindSpot = value; };
	inline const void* Get_Revisit_IgnoreBlindSpot(Agent* self) { return &((Revisit*)self)->IgnoreBlindSpot; };

	inline void FunctionPointer_Revisit_AskForBlindSpot(Agent* self) { ((Revisit*)self)->AskForBlindSpot(); }
	inline void FunctionPointer_Revisit_FindRevisitOrder(Agent* self) { ((Revisit*)self)->FindRevisitOrder(); }
	inline void FunctionPointer_Revisit_FindRevisitPath(Agent* self) { ((Revisit*)self)->FindRevisitPath(); }
	inline void FunctionPointer_Revisit_LogMessage(char* param0) { Revisit::LogMessage(param0); }
	inline bool FunctionPointer_Revisit_VehicleVectorEmpty(Agent* self) { return (bool)((Process*)self)->_Execute_Method_<METHOD_TYPE_Process_VehicleVectorEmpty, bool >(); }

	inline void Set_Recognize_AmmunitionAvaiable(Agent* self, bool value) { ((Recognize*)self)->AmmunitionAvaiable = value; };
	inline const void* Get_Recognize_AmmunitionAvaiable(Agent* self) { return &((Recognize*)self)->AmmunitionAvaiable; };

	inline void Set_Recognize_CanBeRecognized(Agent* self, bool value) { ((Recognize*)self)->CanBeRecognized = value; };
	inline const void* Get_Recognize_CanBeRecognized(Agent* self) { return &((Recognize*)self)->CanBeRecognized; };

	inline void Set_Recognize_NeedEliminated(Agent* self, bool value) { ((Recognize*)self)->NeedEliminated = value; };
	inline const void* Get_Recognize_NeedEliminated(Agent* self) { return &((Recognize*)self)->NeedEliminated; };

	inline void FunctionPointer_Recognize_AddToEliminate(Agent* self) { ((Recognize*)self)->AddToEliminate(); }
	inline void FunctionPointer_Recognize_AddToRevisit(Agent* self) { ((Recognize*)self)->AddToRevisit(); }
	inline void FunctionPointer_Recognize_ApproachAndRecognize(Agent* self) { ((Recognize*)self)->ApproachAndRecognize(); }
	inline void FunctionPointer_Recognize_Eliminate(Agent* self) { ((Recognize*)self)->Eliminate(); }
	inline void FunctionPointer_Recognize_LogMessage(char* param0) { Recognize::LogMessage(param0); }

	inline void Set_Interact_InteractTask(Agent* self, TaskType value) { ((Interact*)self)->InteractTask = value; };
	inline const void* Get_Interact_InteractTask(Agent* self) { return &((Interact*)self)->InteractTask; };

	inline void FunctionPointer_Interact_LogMessage(char* param0) { Interact::LogMessage(param0); }
	inline void FunctionPointer_Interact_MoveTo(Agent* self) { ((Interact*)self)->_Execute_Method_<METHOD_TYPE_Interact_MoveTo, void >(); }
	inline void FunctionPointer_Interact_Resume(Agent* self) { ((Interact*)self)->Resume(); }
	inline void FunctionPointer_Interact_SetTargetType(Agent* self) { ((Interact*)self)->SetTargetType(); }
	inline void FunctionPointer_Interact_TurnBack(Agent* self) { ((Interact*)self)->_Execute_Method_<METHOD_TYPE_Interact_TurnBack, void >(); }
}
#endif // _BEHAVIAC_AGENT_PROPERTIES_H_
