// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

#include "blackboard.h"

///<<< BEGIN WRITING YOUR CODE FILE_INIT

///<<< END WRITING YOUR CODE

blackboard::blackboard()
{
	ManualCommand = false;
	NewTarget = false;
	TargetsFound = 0;
	TotalTargets = 0;
///<<< BEGIN WRITING YOUR CODE CONSTRUCTOR

///<<< END WRITING YOUR CODE
}

blackboard::~blackboard()
{
///<<< BEGIN WRITING YOUR CODE DESTRUCTOR

///<<< END WRITING YOUR CODE
}

void blackboard::LogicInit()
{
//NOTE 初始化接口，初始化时需要赋值这些变量
	//给定艇的数量
	VehiclesNum=4;
	//给定目标总数
	TotalTargets=20;
	//编队标志位
	formation_flag= false;
	//感知半径
	perception_radius=30;
	//终点的bias
	end_pt_bias = 0.00002;

	// 新场景标志位
	new_scene = false;
	// /* 起始位置 */
	// for (int i = 0; i < VehiclesNum; i++)
	// {
	// 	cv::Point st_cv_pt;
	// 	st_cv_pt.x = 0;
	// 	st_cv_pt.y = 0;
	// 	LatLngPoint st_ll_pt = transfer_.CV2LngAndlat(st_cv_pt);
	// 	std::cout << "st_ll_pt" << st_ll_pt.lat << "," << st_ll_pt.lng << std::endl;
	// 	current_pt.push_back(st_ll_pt);
	// }
	

	LateralPerception=std::vector<bool> {true,false,true,false};    //第几个智能体是否有侧扫能力
	// speed = std::vector<double>{1.0, 2.0 , 1.0, 2.0}; //第几个智能体的船速
		speed = std::vector<double>{2.5, 2.5 , 2.5, 2.5}; //第几个智能体的船速
	capacity = std::vector<int> {4, 2, 2, 2}; // 第几个智能体的载弹量 (这里在后面先给的平均值, 需要单独的在这里赋值)
	std::vector<cv::Point> mines;   // 障碍坐标
		/* 重访障碍经纬度 */


	const int RevisitTime=100;  //处理障碍作业时间，单位：秒
	
	//simulation接口
	// end_pt={121.76351309,25.16187175};

	end_pt = {121.652, 38.8508};
	for (int i = 0; i < VehiclesNum; i++)
	{
		end_pts.push_back(LatLngPoint{ end_pt.lng,end_pt.lat + end_pt_bias * i });
	}


	LeftTime = 4* 60 *60; // 4小时
	Detect_Radius = 70;
	Clean_Radius = 150;
	Eliminate_Radius = 100;
	cleaning_time = 0.5;
	cleaned_time = 1;

	/* 赋值 */
	// area_max_lat = 25.21185868;
	// area_min_lat = 25.17538;
	// area_max_lng  = 121.8073228;
	// area_min_lng = 121.7337084;

	area_max_lat = 38.850755542516708;
	area_min_lat = 38.832794381305575;
	area_max_lng  = 121.72134993597865;
	area_min_lng = 121.65202497504652;
	
    LngLatArea={{area_min_lng,area_min_lat},{area_max_lng,area_min_lat},{area_max_lng,area_max_lat},{area_min_lng,area_max_lat}};
	transfer_.Reinit(area_max_lat, area_min_lat, area_min_lng, area_max_lng);

	end_pt_cv = transfer_.LngAndlat2CV(end_pt);
	for (auto element : end_pts)
	{
		auto temp_cv_end_pt = transfer_.LngAndlat2CV(element);
		end_pt_cvs.push_back(temp_cv_end_pt);
	}

	// 决策覆盖阶段，目标是否需要处理
	// MyCost.contain = // 参数意义：禁区包含
	// MyCost.distance2centerline = // 参数意义：雷到区域中心线距离
	// MyCost.distance2desternation = // 参数意义：雷到终点距离
	// MyCost.thresthold =	// 参数意义：是否处理的阈值

	// 确定处理后，决策由哪艘艇执行清除任务
	// MyCost.capacity =  // 参数意义：对没有弹药艇的惩罚项
	// MyCost.distance2vehicle = // 参数意义：雷到该艇的距离
	// MyCost.heading = // 参数意义：该艇的朝向

	cv::Point start_pt_cv(5400, 1800);
	LatLngPoint start_pt_latlng = transfer_.CV2LngAndlat(start_pt_cv);

    vector<Point> visual_area;
    for(auto &pt:LngLatArea)
    {
        auto cv_pt=transfer_.LngAndlat2CV(pt);
        CVArea.push_back(cv_pt);
    }

	/* 起始位置 */
	for (int i = 0; i < VehiclesNum; i++)
	{
		cv::Point st_cv_pt;
		st_cv_pt.x = 50;
		st_cv_pt.y = 0;
		LatLngPoint st_ll_pt = transfer_.CV2LngAndlat(st_cv_pt);
		// std::cout << "st_ll_pt" << st_ll_pt.lat << "," << st_ll_pt.lng << std::endl;
		current_pt.push_back(st_ll_pt);
	}

	StateVector.resize(VehiclesNum);

	g_CoverageAgent->VehicleID.clear();
	for(int i=0;i<VehiclesNum;i++)
	{
		g_CoverageAgent->VehicleID.push_back(i);
		StateVector.push_back(0);
	}
	g_RevisitAgent->VehicleID.clear();

	// 新增初始化

	
}


///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE
