// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

#ifndef _BEHAVIAC_BLACKBOARD_H_
#define _BEHAVIAC_BLACKBOARD_H_

#include "behaviac_headers.h"

///<<< BEGIN WRITING YOUR CODE FILE_INIT

///<<< END WRITING YOUR CODE
#include "Revisit.h"
#include "Coverage.h"

class Coverage;
class Revisit;

extern Revisit* g_RevisitAgent;
extern Coverage* g_CoverageAgent;
enum Msg_Type{
	NoMsg,
	EnableDisable,
	ManualCommand,
	SomeMissionFinnished,
	New_Target
};

enum MineType{
    DETECTED,   // 被探测到但未清除
    CLEANING,   // 正在清除
    CLEANED,     // 清除完毕
	DONE			// 半径置0

} ;
struct DecisionCost
{
	double contain;
	double distance2desternation;
	double distance2centerline;
	double thresthold;
	double capacity;
	double distance2vehicle;
	double heading;
};


class blackboard : public behaviac::Agent
///<<< BEGIN WRITING YOUR CODE blackboard
///<<< END WRITING YOUR CODE
{
public:
	blackboard();
	virtual ~blackboard();

	BEHAVIAC_DECLARE_AGENTTYPE(blackboard, behaviac::Agent)

	public: bool ManualCommand;

	public: bool NewTarget;

	public: int TargetsFound;

	public: int TotalTargets;

	public: void LogicInit();

///<<< BEGIN WRITING YOUR CODE CLASS_PART
	bool formation_flag;
	std::vector<LatLngPoint> LngLatArea;
	std::vector<cv::Point> CVArea;
	std::vector<bool> LateralPerception;    //第几个智能体是否有侧扫能力
	std::vector<double> speed; //第几个智能体的船速
	std::vector<int> capacity; // 第几个智能体的载弹量 (这里在后面先给的平均值, 需要单独的在这里赋值)
	std::vector<cv::Point> mines;   // 障碍坐标
	
	std::vector<double> mines_radius;//障碍半径
	
	std::vector<cv::Point2f> simulation_mines; // 仿真障碍
	std::vector<MineType> mines_type;  // 水雷状态
	
	std::vector<int> simulation_mines_radius;//障碍半径
	std::vector<int> Mine_Index_ID;		// 水雷索引，弥补清除雷造成的索引错误
	std::vector<int> Mine_Group_Index;		// 存在雷群的水雷索引


	std::vector<std::vector<cv::Point>> local_mines;//局部雷的位置
	std::vector<std::vector<double>> local_radius;//局部雷半径

	std::vector<std::vector<double>> for_revisit;
	
	std::vector<int>  WorkTime;  //处理障碍作业时间，单位：秒，TODO：不是单纯时间，加入作业函数 (留好接口)；一个艇作业时间太长
	std::vector<int> Delivery;	// 用于标记该位置雷的数量
	std::vector<int> Priority;	 //	用于标记雷的优先级


	// 新场景添加变量
	std::vector<cv::Point2f> simulation_mines_new_scene; // 仿真障碍
	std::vector<MineType> mines_type_new_scene;  // 水雷状态
	
	std::vector<int> simulation_mines_radius_new_scene;//障碍半径
	std::vector<int> Mine_Index_ID_new_scene;		// 水雷索引，弥补清除雷造成的索引错误
	std::vector<int> Mine_Group_Index_new_scene;		// 存在雷群的水雷索引

	std::vector<int>  WorkTime_NewScene;  //处理障碍作业时间，单位：秒，TODO：不是单纯时间，加入作业函数 (留好接口)；一个艇作业时间太长
	std::vector<int> Delivery_NewScene;	// 用于标记该位置雷的数量
	std::vector<int> Priority_NewScene;	 //	用于标记雷的优先级

	bool new_scene;	// 新场景标志位
	std::vector<std::vector<int>> Skill; // 可以处理该雷的船只
	std::vector<std::vector<clock_t>> RevisitBanTime; // 对应该雷在被重访后形成的时间禁区
	std::vector<std::pair<int, int>> TimeWindow; // 该雷对应的时间窗口
	int CoverLeftTime;
	
	std::vector<std::pair<int, int>> VehiclesNewSceneNum; // 每艘艇的 查证基数(first) 和 重访基数(second)
	std::vector<std::pair<int, int>> MinesNewSceneNum; // 所有雷 查证阈值(first) 和 重访阈值(second)


	double Detect_Radius;	// 探测到，不可进入半径
	double  Clean_Radius;		// 清理中，不可进入半径
	double  Eliminate_Radius;	// 清理后，不可进入半径

	double cleaning_time;	//爆炸后不可进入时间(秒)
	double cleaned_time; //清理完成后残留时间(秒)

	std::vector<double> safe_area; // 安全通道
	vector<LatLngPoint> BlindAreas;	// 盲区

	int end_pt_bias;
	cv::Point end_pt_cv;	// 终点转换为cv坐标
	vector<cv::Point> end_pt_cvs;//使用四车终点
	DecisionCost MyCost; // 覆盖阶段是否处理雷的代价

	LatLngPoint start_pt, end_pt;
	vector<LatLngPoint> end_pts;//使用四车终点
	vector<LatLngPoint>  current_pt;
	std::vector<cv::Point2f> start_pts;
	double area_max_lat, area_min_lat, area_min_lng, area_max_lng;//NOTE需要输入的区域坐标
	const int CoverFlag=0;
	const int RevisitFlag=1;
	const int ManualFlag =2;
	double LeftTime;
	int VehiclesNum;
	Msg_Type msg_type;
	int FinnishedIndex;
	std::vector<int> StateVector;
	//感知半径
	double perception_radius;
///<<< END WRITING YOUR CODE
};

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

#endif
